From a4bb0192550803db3d07628a29284a76f7204365 Mon Sep 17 00:00:00 2001
From: Ken Sedgwick <ken@bonsai.com>
Date: Tue, 2 May 2023 20:20:50 -0700
Subject: [PATCH] Handle JSON-RPC msat amounts in either the old or new
 conventions

---
 Boss/Mod/ActiveProber.cpp                     |  8 ++++----
 Boss/Mod/ChannelFundsComputer.cpp             |  7 ++-----
 Boss/Mod/Dowser.cpp                           |  5 ++---
 Boss/Mod/EarningsRebalancer.cpp               |  8 ++++----
 Boss/Mod/FeeModderByBalance.cpp               |  8 ++++----
 Boss/Mod/FeeModderBySize.cpp                  |  4 ++--
 Boss/Mod/ForwardFeeMonitor.cpp                |  4 ++--
 Boss/Mod/FundsMover/Attempter.cpp             |  4 ++--
 Boss/Mod/HtlcAcceptor.cpp                     | 12 ++++++------
 Boss/Mod/InitialRebalancer.cpp                |  8 ++++----
 Boss/Mod/JitRebalancer.cpp                    | 10 ++++------
 Boss/Mod/ListfundsAnalyzer.cpp                | 14 ++++++++------
 Boss/Mod/ListpaysHandler.cpp                  |  8 ++++----
 Boss/Mod/MoveFundsCommand.cpp                 | 17 +++++++++--------
 Boss/Mod/NodeBalanceSwapper.cpp               | 14 +++++++-------
 Boss/Mod/OnchainFundsAnnouncer.cpp            | 13 ++++---------
 .../Mod/PeerCompetitorFeeMonitor/Surveyor.cpp |  4 ++--
 Boss/Mod/PeerJudge/DataGatherer.cpp           |  4 ++--
 Boss/Mod/SwapManager.cpp                      |  5 ++---
 Ln/Amount.cpp                                 | 19 +++++++++++++++++++
 Ln/Amount.hpp                                 |  8 ++++++++
 21 files changed, 101 insertions(+), 83 deletions(-)

diff --git a/Boss/Mod/ActiveProber.cpp b/Boss/Mod/ActiveProber.cpp
index 2bbd36468..a284e75b9 100644
--- a/Boss/Mod/ActiveProber.cpp
+++ b/Boss/Mod/ActiveProber.cpp
@@ -137,9 +137,9 @@ class ActiveProber::Run : public std::enable_shared_from_this<Run> {
 						chan0 = Ln::Scid(std::string(
 							c["short_channel_id"]
 						));
-						cap0 = Ln::Amount(std::string(
+						cap0 = Ln::Amount::object(
 							c["spendable_msat"]
-						));
+						);
 						break;
 					}
 
@@ -263,9 +263,9 @@ class ActiveProber::Run : public std::enable_shared_from_this<Run> {
 				chan1 = Ln::Scid(std::string(
 					hop1["channel"]
 				));
-				amount1 = Ln::Amount(std::string(
+				amount1 = Ln::Amount::object(
 					hop1["amount_msat"]
-				));
+				);
 				delay1 = std::uint32_t(double(
 					hop1["delay"]
 				));
diff --git a/Boss/Mod/ChannelFundsComputer.cpp b/Boss/Mod/ChannelFundsComputer.cpp
index 5ba633031..8852524bf 100644
--- a/Boss/Mod/ChannelFundsComputer.cpp
+++ b/Boss/Mod/ChannelFundsComputer.cpp
@@ -23,12 +23,9 @@ ChannelFundsComputer::on_listfunds(Msg::ListfundsResult const& r) {
 			if (!chan.is_object() || !chan.has("our_amount_msat"))
 				continue;
 			auto amount_j = chan["our_amount_msat"];
-			if (!amount_j.is_string())
+			if (!Ln::Amount::valid_object(amount_j))
 				continue;
-			auto amount_s = std::string(amount_j);
-			if (!Ln::Amount::valid_string(amount_s))
-				continue;
-			auto amount = Ln::Amount(amount_s);
+			auto amount = Ln::Amount::object(amount_j);
 			total += amount;
 
 			if (!chan.has("connected"))
diff --git a/Boss/Mod/Dowser.cpp b/Boss/Mod/Dowser.cpp
index 4313c7a24..e04fdf77c 100644
--- a/Boss/Mod/Dowser.cpp
+++ b/Boss/Mod/Dowser.cpp
@@ -243,10 +243,9 @@ class Dowser::Run : public std::enable_shared_from_this<Run> {
 				   )
 					continue;
 				auto amt_j = chan["amount_msat"];
-				if (!amt_j.is_string())
+				if (!Ln::Amount::valid_object(amt_j))
 					continue;
-				auto amt_s = std::string(amt_j);
-				return Ev::lift(Ln::Amount(amt_s));
+				return Ev::lift(Ln::Amount::object(amt_j));
 			}
 
 			/* The channel *can* disappear between the time
diff --git a/Boss/Mod/EarningsRebalancer.cpp b/Boss/Mod/EarningsRebalancer.cpp
index 204e8b47e..64848cd64 100644
--- a/Boss/Mod/EarningsRebalancer.cpp
+++ b/Boss/Mod/EarningsRebalancer.cpp
@@ -173,12 +173,12 @@ class EarningsRebalancer::Impl {
 					   )
 						continue;
 
-					auto to_us = Ln::Amount(std::string(
+					auto to_us = Ln::Amount::object(
 						c["to_us_msat"]
-					));
-					auto c_total = Ln::Amount(std::string(
+					);
+					auto c_total = Ln::Amount::object(
 						c["total_msat"]
-					));
+					);
 					auto to_them = c_total - to_us;
 
 					spendable += to_us;
diff --git a/Boss/Mod/FeeModderByBalance.cpp b/Boss/Mod/FeeModderByBalance.cpp
index 94862324e..86c057f10 100644
--- a/Boss/Mod/FeeModderByBalance.cpp
+++ b/Boss/Mod/FeeModderByBalance.cpp
@@ -180,12 +180,12 @@ class FeeModderByBalance::Impl {
 						if (state != "CHANNELD_NORMAL")
 							continue;
 						found = true;
-						to_us = Ln::Amount(std::string(
+						to_us = Ln::Amount::object(
 							c["to_us_msat"]
-						));
-						total = Ln::Amount(std::string(
+						);
+						total = Ln::Amount::object(
 							c["total_msat"]
-						));
+						);
 						break;
 					}
 					if (found)
diff --git a/Boss/Mod/FeeModderBySize.cpp b/Boss/Mod/FeeModderBySize.cpp
index dedb50487..930863579 100644
--- a/Boss/Mod/FeeModderBySize.cpp
+++ b/Boss/Mod/FeeModderBySize.cpp
@@ -175,9 +175,9 @@ class NetworkCapacityTable {
 			auto source = Ln::NodeId(std::string(
 				channel["source"]
 			));
-			auto amount = Ln::Amount(std::string(
+			auto amount = Ln::Amount::object(
 				channel["amount_msat"]
-			));
+			);
 			(*capacities)[source] += amount;
 
 			return load_capacities_loop( pchannels
diff --git a/Boss/Mod/ForwardFeeMonitor.cpp b/Boss/Mod/ForwardFeeMonitor.cpp
index ab914c26f..1e1ba34e3 100644
--- a/Boss/Mod/ForwardFeeMonitor.cpp
+++ b/Boss/Mod/ForwardFeeMonitor.cpp
@@ -82,9 +82,9 @@ void ForwardFeeMonitor::start() {
 			if (out_it != peers.end())
 				out_id = out_it->second;
 
-			fee = Ln::Amount(std::string(
+			fee = Ln::Amount::object(
 				payload["fee_msat"]
-			));
+			);
 			resolution_time = double(payload["resolved_time"])
 					- double(payload["received_time"])
 					;
diff --git a/Boss/Mod/FundsMover/Attempter.cpp b/Boss/Mod/FundsMover/Attempter.cpp
index 6965b831b..6fb5e4d5e 100644
--- a/Boss/Mod/FundsMover/Attempter.cpp
+++ b/Boss/Mod/FundsMover/Attempter.cpp
@@ -171,9 +171,9 @@ class Attempter::Impl : public std::enable_shared_from_this<Impl> {
 				hop1 = Ln::Scid(std::string(
 					hop1_data["channel"]
 				));
-				*hop1_amount = Ln::Amount(std::string(
+				*hop1_amount = Ln::Amount::object(
 					hop1_data["amount_msat"]
-				));
+				);
 				*hop1_delay = std::uint32_t(double(
 					hop1_data["delay"]
 				));
diff --git a/Boss/Mod/HtlcAcceptor.cpp b/Boss/Mod/HtlcAcceptor.cpp
index 27a7168f3..9709c420c 100644
--- a/Boss/Mod/HtlcAcceptor.cpp
+++ b/Boss/Mod/HtlcAcceptor.cpp
@@ -124,9 +124,9 @@ class HtlcAcceptor::Impl {
 			rv->incoming_payload = Util::Str::hexread(std::string(
 				onion["payload"]
 			));
-			rv->incoming_amount = Ln::Amount(std::string(
-				htlc["amount"]
-			));
+			rv->incoming_amount = Ln::Amount::object(
+				htlc["amount_msat"]
+			);
 			rv->incoming_cltv = std::uint32_t(double(
 				htlc["cltv_expiry"]
 			));
@@ -142,9 +142,9 @@ class HtlcAcceptor::Impl {
 				rv->next_channel = Ln::Scid(std::string(
 					onion["short_channel_id"]
 				));
-				rv->next_amount = Ln::Amount(std::string(
-					onion["forward_amount"]
-				));
+				rv->next_amount = Ln::Amount::object(
+					onion["forward_msat"]
+				);
 				rv->next_cltv = std::uint32_t(double(
 					onion["outgoing_cltv_value"]
 				));
diff --git a/Boss/Mod/InitialRebalancer.cpp b/Boss/Mod/InitialRebalancer.cpp
index 189163665..b9eb0af1c 100644
--- a/Boss/Mod/InitialRebalancer.cpp
+++ b/Boss/Mod/InitialRebalancer.cpp
@@ -242,13 +242,13 @@ class InitialRebalancer::Impl::Run::Impl
 		   )
 			return;
 		/* FIXME: Handle reserves.  */
-		auto to_us = Ln::Amount(std::string(c["to_us_msat"]));
-		auto total = Ln::Amount(std::string(c["total_msat"]));
+		auto to_us = Ln::Amount::object(c["to_us_msat"]);
+		auto total = Ln::Amount::object(c["total_msat"]);
 		auto to_them = total - to_us;
 		for (auto h : c["htlcs"])
-			to_them -= Ln::Amount(std::string(
+			to_them -= Ln::Amount::object(
 				h["amount_msat"]
-			));
+		);
 		a_spendable += to_us;
 		a_receivable += to_them;
 		a_total += total;
diff --git a/Boss/Mod/JitRebalancer.cpp b/Boss/Mod/JitRebalancer.cpp
index 520289048..5d9bde785 100644
--- a/Boss/Mod/JitRebalancer.cpp
+++ b/Boss/Mod/JitRebalancer.cpp
@@ -358,14 +358,12 @@ class JitRebalancer::Impl::Run::Impl {
 						);
 						if (state != "CHANNELD_NORMAL")
 							continue;
-						to_us += Ln::Amount(
-							std::string(
+						to_us += Ln::Amount::object(
 							c["to_us_msat"]
-						));
-						capacity += Ln::Amount(
-							std::string(
+						);
+						capacity += Ln::Amount::object(
 							c["total_msat"]
-						));
+						);
 					}
 
 					auto& av = available[peer];
diff --git a/Boss/Mod/ListfundsAnalyzer.cpp b/Boss/Mod/ListfundsAnalyzer.cpp
index 500b42336..bd85d2269 100644
--- a/Boss/Mod/ListfundsAnalyzer.cpp
+++ b/Boss/Mod/ListfundsAnalyzer.cpp
@@ -39,17 +39,19 @@ class ListfundsAnalyzer::Impl {
 		ar.total_owned = Ln::Amount::msat(0);
 
 		for (auto output : l.outputs) {
-			auto amt_s = std::string(output["amount_msat"]);
-			if (!Ln::Amount::valid_string(amt_s))
+			auto amount_msat = output["amount_msat"];
+			if (!Ln::Amount::valid_object(amount_msat))
 				throw Jsmn::TypeError();
-			ar.total_owned += Ln::Amount(amt_s);
+			ar.total_owned +=
+				Ln::Amount::object(amount_msat);
 		}
 
 		for (auto channel : l.channels) {
-			auto amt_s = std::string(channel["our_amount_msat"]);
-			if (!Ln::Amount::valid_string(amt_s))
+			auto amount_msat = channel["our_amount_msat"];
+			if (!Ln::Amount::valid_object(amount_msat))
 				throw Jsmn::TypeError();
-			ar.total_owned += Ln::Amount(amt_s);
+			ar.total_owned +=
+				Ln::Amount::object(amount_msat);
 		}
 
 		return bus.raise(std::move(ar));
diff --git a/Boss/Mod/ListpaysHandler.cpp b/Boss/Mod/ListpaysHandler.cpp
index 4e80b14aa..e32c19c6e 100644
--- a/Boss/Mod/ListpaysHandler.cpp
+++ b/Boss/Mod/ListpaysHandler.cpp
@@ -63,12 +63,12 @@ Ev::Io<void> ListpaysHandler::listpays(Sha256::Hash h) {
 				resp.status = Msg::StatusListpays_pending;
 			} else if (status == "complete") {
 				resp.status = Msg::StatusListpays_success;
-				resp.amount = Ln::Amount(std::string(
+				resp.amount = Ln::Amount::object(
 					pay["amount_msat"]
-				));
-				resp.amount_sent = Ln::Amount(std::string(
+				);
+				resp.amount_sent = Ln::Amount::object(
 					pay["amount_sent_msat"]
-				));
+				);
 			} else throw Jsmn::TypeError();
 		} catch (Jsmn::TypeError const&) {
 			resp.status = Msg::StatusListpays_nonexistent;
diff --git a/Boss/Mod/MoveFundsCommand.cpp b/Boss/Mod/MoveFundsCommand.cpp
index 2b0fa21a7..ab845cf44 100644
--- a/Boss/Mod/MoveFundsCommand.cpp
+++ b/Boss/Mod/MoveFundsCommand.cpp
@@ -25,12 +25,13 @@ class MoveFundsCommand::Impl {
 		bus.subscribe<Msg::Manifestation
 			     >([&bus](Msg::Manifestation const& _) {
 			return bus.raise(Msg::ManifestCommand{
+				/* NOTE - this documents the post v23.02 msat convention. */
 				"clboss-movefunds",
-				"amount sourcenode destnode feebudget",
-				"Move {amount} from a channel with "
+				"amount_msat sourcenode destnode feebudget_msat",
+				"Move {amount_msat} from a channel with "
 				"{sourcenode} to a channel with {destnode}, "
-				"with no more than {feebudget}.  "
-				"{amount} and {feebudget} must have 'msat' "
+				"with no more than {feebudget_msat}.  "
+				"{amount_msat} and {feebudget_msat} must not have 'msat' "
 				"suffixes, and {sourcenode} and {destnode} "
 				"must be node IDs.  "
 				"THIS COMMAND IS FOR DEBUGGING CLBOSS AND "
@@ -71,15 +72,15 @@ class MoveFundsCommand::Impl {
 					dst = parms[2];
 					fee = parms[3];
 				} else {
-					amt = parms["amount"];
+					amt = parms["amount_msat"];
 					src = parms["sourcenode"];
 					dst = parms["destnode"];
-					fee = parms["feebudget"];
+					fee = parms["feebudget_msat"];
 				}
-				msg.amount = Ln::Amount(std::string(amt));
+				msg.amount = Ln::Amount::object(amt);
 				msg.source = Ln::NodeId(std::string(src));
 				msg.destination = Ln::NodeId(std::string(dst));
-				msg.fee_budget = Ln::Amount(std::string(fee));
+				msg.fee_budget = Ln::Amount::object(fee);
 			} catch (std::exception const& _) {
 				return bus.raise(Msg::CommandFail{
 					id, -32602, "Invalid parameters.",
diff --git a/Boss/Mod/NodeBalanceSwapper.cpp b/Boss/Mod/NodeBalanceSwapper.cpp
index b7afa46cb..61b3c4fdc 100644
--- a/Boss/Mod/NodeBalanceSwapper.cpp
+++ b/Boss/Mod/NodeBalanceSwapper.cpp
@@ -140,17 +140,17 @@ class NodeBalanceSwapper::Impl : ModG::Swapper {
 				   , Ln::Amount& recv
 				   , Jsmn::Object const& c
 				   ) {
-		auto to_us = Ln::Amount(std::string(c["to_us_msat"]));
-		auto total = Ln::Amount(std::string(c["total_msat"]));
+		auto to_us = Ln::Amount::object(c["to_us_msat"]);
+		auto total = Ln::Amount::object(c["total_msat"]);
 		auto their = total - to_us;
 		for (auto h : c["htlcs"])
-			their -= Ln::Amount(std::string(h["amount_msat"]));
-		auto our_reserve = Ln::Amount(std::string(
+			their -= Ln::Amount::object(h["amount_msat"]);
+		auto our_reserve = Ln::Amount::object(
 			c["our_reserve_msat"]
-		));
-		auto their_reserve = Ln::Amount(std::string(
+		);
+		auto their_reserve = Ln::Amount::object(
 			c["their_reserve_msat"]
-		));
+		);
 		send = to_us - our_reserve;
 		recv = their - their_reserve;
 	}
diff --git a/Boss/Mod/OnchainFundsAnnouncer.cpp b/Boss/Mod/OnchainFundsAnnouncer.cpp
index b09c237b0..f2801c3e4 100644
--- a/Boss/Mod/OnchainFundsAnnouncer.cpp
+++ b/Boss/Mod/OnchainFundsAnnouncer.cpp
@@ -77,21 +77,16 @@ Ev::Io<void> OnchainFundsAnnouncer::announce() {
 		if (!res.has("excess_msat"))
 			return fail("fundpsbt has no excess_msat", res);
 		auto excess_msat = res["excess_msat"];
-		if (!excess_msat.is_string())
-			return fail( "fundpsbt excess_msat not a string"
+		if (!Ln::Amount::valid_object(excess_msat))
+			return fail( "fundpsbt excess_msat not a valid amount"
 				   , excess_msat
 				   );
-		auto excess_msat_s = std::string(excess_msat);
-		if (!Ln::Amount::valid_string(excess_msat_s))
-			return fail( "fundpsbt excess_msat not valid amount"
-				   , excess_msat
-				   );
-		auto amount = Ln::Amount(excess_msat_s);
+		auto amount = Ln::Amount::object(excess_msat);
 
 		return Boss::log( bus, Debug
 				, "OnchainFundsAnnouncer: "
 				  "Found %s (after deducting fee to spend) onchain."
-				, excess_msat_s.c_str()
+				, std::string(amount).c_str()
 				).then([this, amount]() {
 			return bus.raise(Msg::OnchainFunds{amount});
 		});
diff --git a/Boss/Mod/PeerCompetitorFeeMonitor/Surveyor.cpp b/Boss/Mod/PeerCompetitorFeeMonitor/Surveyor.cpp
index 68695b628..9b26787dc 100644
--- a/Boss/Mod/PeerCompetitorFeeMonitor/Surveyor.cpp
+++ b/Boss/Mod/PeerCompetitorFeeMonitor/Surveyor.cpp
@@ -142,9 +142,9 @@ std::string Surveyor::one_channel(Jsmn::Object const& c) {
 		auto proportional = std::uint32_t(double(
 			c["fee_per_millionth"]
 		));
-		auto weight = Ln::Amount(std::string(
+		auto weight = Ln::Amount::object(
 			c["amount_msat"]
-		));
+		);
 		bases.add(base, weight);
 		proportionals.add(proportional, weight);
 	} catch (Jsmn::TypeError const&) {
diff --git a/Boss/Mod/PeerJudge/DataGatherer.cpp b/Boss/Mod/PeerJudge/DataGatherer.cpp
index 22656ff00..23abc61ce 100644
--- a/Boss/Mod/PeerJudge/DataGatherer.cpp
+++ b/Boss/Mod/PeerJudge/DataGatherer.cpp
@@ -80,9 +80,9 @@ class DataGatherer::Impl {
 						);
 						if (state != "CHANNELD_NORMAL")
 							continue;
-						total += Ln::Amount(std::string(
+						total += Ln::Amount::object(
 							c["total_msat"]
-						));
+						);
 					}
 
 					/* No active channels?  Skip.  */
diff --git a/Boss/Mod/SwapManager.cpp b/Boss/Mod/SwapManager.cpp
index b9dfc204a..22467a9c1 100644
--- a/Boss/Mod/SwapManager.cpp
+++ b/Boss/Mod/SwapManager.cpp
@@ -736,9 +736,8 @@ class SwapManager::Impl {
 			for (auto out : outputs)
 				onchain_funds.push(std::make_pair(
 					std::string(out["address"]),
-					Ln::Amount(std::string(
-						out["amount_msat"]
-					))
+					Ln::Amount::object(out["amount_msat"]
+					)
 				));
 
 			if (was_empty)
diff --git a/Ln/Amount.cpp b/Ln/Amount.cpp
index 103cff396..c7a32d007 100644
--- a/Ln/Amount.cpp
+++ b/Ln/Amount.cpp
@@ -28,6 +28,25 @@ bool Amount::valid_string(std::string const& s) {
 	return true;
 }
 
+bool Amount::valid_object(Jsmn::Object const& o) {
+	if (o.is_number())
+		return true;
+	else if (o.is_string())
+		return valid_string(std::string(o));
+	else
+		return false;
+}
+
+Amount
+Amount::object(Jsmn::Object const& o) {
+	if (o.is_number())
+		return Amount::msat(std::uint64_t(double(o)));
+	else if (o.is_string())
+		return Amount(std::string(o));
+	else
+		throw std::invalid_argument("Ln::Amount json object invalid.");
+}
+
 Amount::Amount(std::string const& s) {
 	if (!valid_string(s))
 		throw std::invalid_argument("Ln::Amount string invalid.");
diff --git a/Ln/Amount.hpp b/Ln/Amount.hpp
index dfb046ed0..16f75ac21 100644
--- a/Ln/Amount.hpp
+++ b/Ln/Amount.hpp
@@ -1,6 +1,7 @@
 #ifndef LN_AMOUNT_HPP
 #define LN_AMOUNT_HPP
 
+#include"Jsmn/Object.hpp"
 #include<cstdint>
 #include<iostream>
 #include<string>
@@ -31,6 +32,13 @@ class Amount {
 	static
 	bool valid_string(std::string const&);
 
+	static
+	Amount object(Jsmn::Object const&);
+	/* Return false if Amount() would throw given this
+	 * object. */
+	static
+	bool valid_object(Jsmn::Object const&);
+
 	static
 	Amount btc(double v) {
 		auto ret = Amount();
