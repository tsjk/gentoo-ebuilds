From efc4cba32335ce69e5da6c77b314c254eacaa1b4 Mon Sep 17 00:00:00 2001
From: Erich Hoover <ehoover@mines.edu>
Date: Fri, 18 Jan 2013 16:38:39 -0700
Subject: user32: SetTimer should respect the minimum and maximum timeout
 limits.

---
 dlls/user32/message.c |    7 ++++++-
 include/winuser.h     |    4 ++++
 2 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/dlls/user32/message.c b/dlls/user32/message.c
index 79066a8..0567b0c 100644
--- a/dlls/user32/message.c
+++ b/dlls/user32/message.c
@@ -4383,12 +4383,17 @@ UINT_PTR WINAPI SetTimer( HWND hwnd, UINT_PTR id, UINT timeout, TIMERPROC proc )
 
     if (proc) winproc = WINPROC_AllocProc( (WNDPROC)proc, FALSE );
 
+    if (timeout < USER_TIMER_MINIMUM)
+        timeout = USER_TIMER_MINIMUM;
+    else if (timeout > USER_TIMER_MAXIMUM)
+        timeout = USER_TIMER_MAXIMUM;
+
     SERVER_START_REQ( set_win_timer )
     {
         req->win    = wine_server_user_handle( hwnd );
         req->msg    = WM_TIMER;
         req->id     = id;
-        req->rate   = max( timeout, SYS_TIMER_RATE );
+        req->rate   = timeout;
         req->lparam = (ULONG_PTR)winproc;
         if (!wine_server_call_err( req ))
         {
diff --git a/include/winuser.h b/include/winuser.h
index c8ffe6d..ec15ef4 100644
--- a/include/winuser.h
+++ b/include/winuser.h
@@ -2521,6 +2521,10 @@ typedef struct tagMINIMIZEDMETRICS {
 #define PM_QS_PAINT       (QS_PAINT << 16)
 #define PM_QS_SENDMESSAGE (QS_SENDMESSAGE << 16)
 
+/* SetTimer() limits */
+#define USER_TIMER_MINIMUM 0x0000000A
+#define USER_TIMER_MAXIMUM 0x7FFFFFFF
+
 /* AnimateWindow() flags */
 #define AW_SLIDE        0x00040000
 #define AW_ACTIVATE     0x00020000
-- 
1.7.9.5

 
